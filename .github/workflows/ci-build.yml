name: CI Build and Test

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  GH_REPOSITORY: ${{ github.repository }}
  DH_REPOSITORY: etretiakov

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: base/Dockerfile.base
            image_name: base
          - dockerfile: r-base/Dockerfile.r-base
            image_name: r-base
          - dockerfile: python-base/Dockerfile.python-base
            image_name: python-base
          - dockerfile: r-python/Dockerfile.r-python
            image_name: r-python
          - dockerfile: posit-workbench/Dockerfile.posit-workbench
            image_name: posit-workbench
          - dockerfile: bioinfo-tools/Dockerfile.bioinfo
            image_name: bioinfo
          # - dockerfile: gpu-enabled/Dockerfile.gpu
          #   image_name: gpu
          # - dockerfile: applications/Compass/Dockerfile.compass
          #   image_name: compass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GITHUB }}/${{ env.GH_REPOSITORY }}/${{ matrix.image_name }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DH_REPOSITORY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Create Docker secret for GitHub PAT
        run: |
          echo "${{ secrets.GH_TOKEN }}" | docker secret create github_pat -

      - name: Build and test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.GH_REPOSITORY }}/${{ matrix.image_name }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.GH_REPOSITORY }}/${{ matrix.image_name }}:cache,mode=max
          secrets: |
            github_pat=github_pat  # Use the same name as in the `docker secret create` step

      - name: Test Docker image
        run: |
          IMAGE_NAME="${{ matrix.image_name }}:${{ steps.meta.outputs.tags }}"
          TEST_SCRIPT="tests/${{ matrix.image_name }}_test.sh"

          if [ -f "$TEST_SCRIPT" ]; then
            echo "Running test script $TEST_SCRIPT for image $IMAGE_NAME"
            chmod +x "$TEST_SCRIPT"
            if ! ./"$TEST_SCRIPT" "$IMAGE_NAME"; then
              echo "Tests failed for $IMAGE_NAME"
              exit 1
            fi
          else
            echo "No test script found for $IMAGE_NAME. Skipping tests."
          fi

      - name: Remove Docker secret (for security)
        if: always() # Always run this step, even if the previous one fails
        run: docker secret rm github_pat

      - name: Build and push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.GH_REPOSITORY }}/${{ matrix.image_name }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY_GITHUB }}/${{ env.GH_REPOSITORY }}/${{ matrix.image_name }}:cache,mode=max
